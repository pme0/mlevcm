}
n_replics <- unlist(lapply(idx_A3, length))  # store how many repeated observations for each specimen
# read predictor (X)
nx <- 180  # number of spectra files
dx <- matrix(0, nx, 2151)
f_base <- "~/Dropbox/research/projects/nirs/data/datasets/experiments_2017_SouthKensington/A3_sporozoites/sporozoites_29June2017_"
for(k in 1:nx){
f_name <- paste(f_base, formatC(k, width = 5,flag = 0),".txt", sep="")
fk <- read.table(file = f_name)
dx[k,] <- fk$V1
}
# average replications
if(Params$avg_replics){
data_X <- c()
for(i in unique(data_A3[select,"Mosquito_ID"])){
if(length(idx_A3[[i]]) > 1){
data_X <- rbind(data_X, colMeans(dx[idx_A3[[i]],]))
}else{
data_X <- rbind(data_X, dx[idx_A3[[i]],])
}
}
}else{
data_X <- dx[select,]
}
# read response (y)
i_y <- select & ((1:nrow(data_A3)) %in% unlist(sapply(idx_A3, "[[", 1)))
data_y <- data_A3[i_y,"Sporozoites"]
return(list(X = data_X, y = data_y, n_replics = n_replics[n_replics != 0], raw_data = data_A3[i_y,]))
}#load_A3
load_A4 <- function(Params){
# read data
data_A4 <-  read.table(file = "~/Dropbox/research/projects/nirs/data/datasets/experiments_2017_SouthKensington/A4_sporozoites/A4_sporozoites_19-07-2017_y.txt", header=T, na.strings = "NA")
data_A4 <- cbind(1:nrow(data_A4), data_A4); colnames(data_A4)[1] <- "Scan_ID"
target_pos <- Params$tp$A4 #{1,2,3,4}
select <- (!is.na(data_A4[,"Position"])) & (!is.na(data_A4[,"Sporozoites"])) & (data_A4[,"Position"] %in% target_pos) #& (!(1:nrow(data_A4) %in% 139:150))
#select[153:154] <- FALSE # outliers, recording errors, etc.
# indices of repetitions for each mosquito
idx_A4 <- list()
for(i in unique(data_A4[select,"Mosquito_ID"])){
rng <- which(data_A4[,"Mosquito_ID"] == i)
aux <- (data_A4[rng,"Position"] %in% target_pos) & !is.na(data_A4[rng,"Position"]) & !is.na(data_A4[rng,"Sporozoites"])
idx_A4[[i]] <- rng[aux]
}
n_replics <- unlist(lapply(idx_A4, length))  # store how many repeated observations for each specimen
# read spectra (X)
nx <- 328  # number of spectra files
dx <- matrix(0, nx, 2151)
f_base <- "~/Dropbox/research/projects/nirs/data/datasets/experiments_2017_SouthKensington/A4_sporozoites/sporozoites_19July2017_"
for(k in 1:nx){
f_name <- paste(f_base, formatC(k, width = 5,flag = 0),".txt", sep="")
fk <- read.table(file = f_name)
dx[k,] <- fk$V1
}
# average replications
if(Params$avg_replics){
data_X <- c()
for(i in unique(data_A4[select,"Mosquito_ID"])){
if(length(idx_A4[[i]]) > 1){
data_X <- rbind(data_X, colMeans(dx[idx_A4[[i]],]))
}else{
data_X <- rbind(data_X, dx[idx_A4[[i]],])
}
}
}else{
data_X <- dx[select,]
}
# read response (y)
i_y <- select & ((1:nrow(data_A4)) %in% unlist(sapply(idx_A4, "[[", 1)))
data_y <- data_A4[i_y,"Sporozoites"]
return(list(X = data_X, y = data_y, n_replics = n_replics[n_replics != 0], raw_data = data_A4[i_y,]))
}#load_A4
load_B_A1T1 <- function(Params){
# read data
#data <-  read.csv(file = "~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/NIRS_E1T1_(PEDRO).csv", header=T, na.strings = "NA")
data <-  read.csv(file = "~/DROPBOX_overflow/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/NIRS_E1T1_(PEDRO).csv", header=T, na.strings = "NA")
target_pos <- Params$tp$B_A1T1  # {1,2,3,4}
select <- (!is.na(data[,"Position"])) & (!is.na(data[,"Age"])) & (!is.na(data[,"Location"])) & (!is.na(data[,"Generation"])) & (!is.na(data[,"Species"])) & (data[,"Position"] %in% target_pos)
#select[153:154] <- FALSE # outliers, etc.
unique_IDs <- unique(data[select,"Mosquito_ID"])
# indices of repetitions for each mosquito
idx <- list()
for(i in unique_IDs){
rng <- which(data[,"Mosquito_ID"] == i)   #which((data[,"Mosquito_ID"])[data[,"Mosquito_ID"] == i])
aux <- (data[rng,"Position"] %in% target_pos) & !is.na(data[rng,"Position"]) & !is.na(data[rng,"Age"]) & (!is.na(data[rng,"Location"])) & (!is.na(data[rng,"Generation"])) & (!is.na(data[rng,"Species"]))
idx[[i]] <- rng[aux]
}
n_replics <- unlist(lapply(idx, length))  # store how many repeated observations for each specimen
# read predictor (X)
dates    <- c("8Oct17","9Oct17","10Oct17")
nx_dates <- c(  695   ,  782   ,   1025  )
nx <- sum(nx_dates)  # number of spectra files
dx <- matrix(0, nx, 2151);  kk <- 0
for(day in dates){
for(k in 0:(nx_dates[which(dates == day)]-1)){
kk <- kk + 1
#f_name <- paste0("~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/Test 1B/E1Test1_",day,"_", formatC(k, width = 5,flag = 0),".txt")
f_name <- paste0("~/DROPBOX_overflow/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/Test 1B/E1Test1_",day,"_", formatC(k, width = 5,flag = 0),".txt")
dx[kk,] <- read.table(file = f_name, header=T, sep="\t")[,2]
}
}
# average replications
if(Params$avg_replics){
data_X <- c()
for(i in unique_IDs){
if(length(idx[[i]]) > 1){
data_X <- rbind(data_X, colMeans(dx[idx[[i]],]))
}else{
data_X <- rbind(data_X, dx[idx[[i]],])
}
}
}else{
data_X <- dx[select,]
}
# read response (y)
if(Params$avg_replics){
i_y <- select & ((1:nrow(data)) %in% unlist(sapply(idx, "[[", 1)))
}else{
i_y <- select & ((1:nrow(data)) %in% unlist(idx))
}
data_y <- factor(data[i_y,"Species"])
# raw data
raw_data <- data[i_y,]   #  table(raw_data[,c("Species","Location","Generation")])
return(list(X = data_X, y = data_y, n_replics = n_replics[n_replics != 0], raw_data = raw_data))
# re-save with simple layout
#data_export <- data.frame(y = y, X = X)
#write.table(data_export, file="~/Dropbox/research/projects/nirs/data/datasets/experiments_Tom/A1_sporozoites/DATASET_sporozoites_2017_06_01.txt", sep=",", row.names=F, col.names=T)
}#load_B_A1T1
load_B_A1E1 <- function(Params){
# read data
#data <-  read.csv(file = "~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/NIRS_E1A1_300118_(PEDRO).csv", header=T, na.strings = "NA")
data <-  read.csv(file = "~/DROPBOX_overflow/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/NIRS_E1A1_300118_(PEDRO).csv", header=T, na.strings = "NA")
target_pos <- Params$tp$B_A1E1  # {1,2}
select <- (!is.na(data[,"Position"])) & (!is.na(data[,"Age"])) & (!is.na(data[,"Species"])) & (!is.na(data[,"Notes"])) & (!is.na(data[,"Notes"]) & data[,"Notes"] != "fallen") & (data[,"Position"] %in% target_pos) # & (is.na(data[,"Dissect_oocyst"])) #& (data[,"Infection_status"] %in% c("infectious","uninfectious"))  #
#select[153:154] <- FALSE # outliers, etc.
unique_IDs <- unique(data[select,"Mosquito_ID"])
# indices of repetitions for each mosquito
idx <- list()
for(i in unique_IDs){
rng <- which(data[,"Mosquito_ID"] == i)   #which((data[,"Mosquito_ID"])[data[,"Mosquito_ID"] == i])
aux <- (data[rng,"Position"] %in% target_pos) & !is.na(data[rng,"Position"]) & !is.na(data[rng,"Age"]) & (!is.na(data[rng,"Species"])) & (!is.na(data[rng,"Age"])) & (!is.na(data[rng,"Notes"])) & (!is.na(data[rng,"Notes"]) & data[rng,"Notes"] != "fallen")
idx[[i]] <- rng[aux]
}
n_replics <- unlist(lapply(idx, length))  # store how many repeated observations for each specimen
# read predictor (X)
dates    <- c("01Nov17","02Dec17","02Nov17","03Dec17","03Nov17","04Dec17","04Nov17","05Dec17","05Nov17","06Dec17","06Nov17", "07Dec17","07Nov17","08Dec17","08Nov17","20Dec17","20Nov17","21Nov17","22Nov17","22Oct17","23Nov17","23Oct17","24Nov17","24Oct17","25Oct17","26Oct17","27Oct17","28Nov17","28Oct17","29Nov17","29Oct17","30Nov17","30Oct17","31Oct17")
nx_dates <- c(    105    ,   121   ,   155   ,   161   ,   197   ,   161   ,   157   ,   135   ,   125   ,   127   ,   103   ,    119   ,   103   ,   41    ,   43    ,   41    ,   61    ,   61    ,   41    ,   61    ,   41    ,   41    ,   161   ,   55    ,   177   ,   177   ,   177   ,   123   ,   151   ,   121   ,   179   ,   141   ,   183   ,   185)
nx <- sum(nx_dates)  # number of spectra files
dx <- matrix(0, nx, 2151);  kk <- 0
for(day in dates){
for(k in 0:(nx_dates[which(dates == day)]-1)){
kk <- kk + 1
#f_name <- paste0("~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/Experiment 1, comparative age/E1Age_",day,"_", formatC(k, width = 5,flag = 0),".txt")
f_name <- paste0("~/DROPBOX_overflow/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 1 - Age/Experiment 1, comparative age/E1Age_",day,"_", formatC(k, width = 5,flag = 0),".txt")
dx[kk,] <- read.table(file = f_name, header=T, sep="\t")[,2]
}
}
# average replications
if(Params$avg_replics){
data_X <- c()
for(i in unique_IDs){
if(length(idx[[i]]) > 1){
data_X <- rbind(data_X, colMeans(dx[idx[[i]],]))
}else{
data_X <- rbind(data_X, dx[idx[[i]],])
}
}
}else{
data_X <- dx[select,]
}
# read response (y)
i_y <- select & ((1:nrow(data)) %in% unlist(sapply(idx, "[[", 1)))
data_y <- data[i_y,"Age"]
# raw data
raw_data <- data[i_y,]
return(list(X = data_X, y = data_y, n_replics = n_replics[n_replics != 0], raw_data = raw_data))
# re-save with simple layout
#data_export <- data.frame(y = y, X = X)
#write.table(data_export, file="~/Dropbox/research/projects/nirs/data/datasets/experiments_Tom/A1_sporozoites/DATASET_sporozoites_2017_06_01.txt", sep=",", row.names=F, col.names=T)
}#load_B_A1E1
load_B_A2T2 <- function(Params){
# read data
data <-  read.csv(file = "~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 2 - Pf Infection/NIRS_TEMPLATE_Activity 2 Test2 New version 300118 MOD pedro.csv", header=T, na.strings = "NA")
target_pos <- Params$tp$B_A2T2  # {1,2,3,4}
select <- (!is.na(data[,"Position"])) & (!is.na(data[,"Infection_status"])) & (!is.na(data[,"Notes"])) & (!is.na(data[,"Notes"]) & data[,"Notes"] != "fallen") & (data[,"Position"] %in% target_pos) & (data[,"Feeding_status"] %in% c("Exposed","Inactivated blood Fed")) & (data[,"Age"] %in% c("D14","D15","D18"))# & (is.na(data[,"Dissect_oocyst"])) #& (data[,"Infection_status"] %in% c("infectious","uninfectious"))  #
#select[153:154] <- FALSE # outliers, etc.
unique_IDs <- unique(data[select,"Mosquito_ID"])
# indices of repetitions for each mosquito
idx <- list()
for(i in unique_IDs){
rng <- which(data[,"Mosquito_ID"] == i)   #which((data[,"Mosquito_ID"])[data[,"Mosquito_ID"] == i])
aux <- (data[rng,"Position"] %in% target_pos) & !is.na(data[rng,"Position"]) & !is.na(data[rng,"Infection_status"])
idx[[i]] <- rng[aux]
}
n_replics <- unlist(lapply(idx, length))  # store how many repeated observations for each specimen
# read predictor (X)
dates    <- c("14Oct17", "04Nov17", "11Nov17", "15Nov17", "07Dec17", "14Dec17")
nx_dates <- c(   211   ,    309   ,    239   ,    21    ,    201   ,    181   )
nx <- sum(nx_dates)  # number of spectra files
dx <- matrix(0, nx, 2151);  kk <- 0
for(day in dates){
for(k in 0:(nx_dates[which(dates == day)]-1)){
kk <- kk + 1
f_name <- paste0("~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 2 - Pf Infection/Test 2-New version/E1Test2_",day,"_", formatC(k, width = 5,flag = 0),".txt")
dx[kk,] <- read.table(file = f_name, header=T, sep="\t")[,2]
}
}
# average replications
if(Params$avg_replics){
data_X <- c()
for(i in unique_IDs){
if(length(idx[[i]]) > 1){
data_X <- rbind(data_X, colMeans(dx[idx[[i]],]))
}else{
data_X <- rbind(data_X, dx[idx[[i]],])
}
}
}else{
data_X <- dx[select,]
}
# read response (y)
i_y <- select & ((1:nrow(data)) %in% unlist(sapply(idx, "[[", 1)))
data_y <- data[i_y,"Infection_status"] #as.numeric(data[i_y,"Infection_status"] %in% c("infectious","infected"))
# raw data
raw_data <- data[i_y,]
return(list(X = data_X, y = data_y, n_replics = n_replics[n_replics != 0], raw_data = raw_data))
# re-save with simple layout
#data_export <- data.frame(y = y, X = X)
#write.table(data_export, file="~/Dropbox/research/projects/nirs/data/datasets/experiments_Tom/A1_sporozoites/DATASET_sporozoites_2017_06_01.txt", sep=",", row.names=F, col.names=T)
}#load_B_A2T2
load_B_A2E2 <- function(Params){
# read data
data <-  read.csv(file = "~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 2 - Pf Infection/NIRS_Burkina_A2E2_140518_PEDRO.csv", header=T, na.strings = "NA")
#data <-  read.csv(file = "~/DROPBOX_overflow/research/projects/nirs/data/datasets/Burkina NIRS Data [offline copy 27apr2018]/Activity 1 - Age/NIRS_E1A1_300118_(PEDRO).csv", header=T, na.strings = "NA")
target_repl <- c(1,2,3)  # {1,2,3} different gemetocytemia levels (1=low, 2=medium, 3=high)
target_pos  <- c('head_right', 'head_left')  # {head_right, head_left, abdomen_right, abdomen_left}
target_age  <- c(3,6)  # {3,6} age when fed
# !(data[rng,"Notes"] %in% c('microsporidies','melinization_and_microsporidies')) &
select <- (data[,"Exclude"] != 'y') & (data[,"Position"] %in% target_pos) & (data[,"Replicate"] %in% target_repl) & (data[,"Age_group"] %in% target_age) & (!is.na(data[,"Infection_status"])) & (!is.na(data[,"Position"])) & (!is.na(data[,"Notes"]))  # & (is.na(data[,"Dissect_oocyst"])) #& (data[,"Infection_status"] %in% c("infectious","uninfectious"))  #
unique_IDs <- unique(data[select,"Mosquito_ID"])
# indices of repetitions for each mosquito
idx <- list()
for(i in unique_IDs){
rng <- which(data[,"Mosquito_ID"] == i)   #which((data[,"Mosquito_ID"])[data[,"Mosquito_ID"] == i])
aux <- (data[rng,"Exclude"] != 'y') & (data[rng,"Position"] %in% target_pos) & (data[rng,"Replicate"] %in% target_repl) & (data[rng,"Age_group"] %in% target_age) & (!is.na(data[rng,"Infection_status"])) & !is.na(data[rng,"Position"]) & (!is.na(data[rng,"Notes"]))
idx[[i]] <- rng[aux]
}
n_replics <- unlist(lapply(idx, length))  # store how many repeated observations for each specimen
# read spectra
# replicate 1
dates_A    <- c("24Nov17","26Nov17","28Nov17","30Nov17","02Dec17","04Dec17","06Dec17","08Dec17","10Dec17")
nx_dates_A <- c(   481   ,   485   ,   641   ,   485   ,   481   ,   481   ,   513   ,   321   ,   229   )
nx_A <- sum(nx_dates_A)  # number of spectra files
dx_A <- matrix(0, nx_A, 2151);  kk <- 0
for(day in dates_A){
for(k in 0:(nx_dates_A[which(dates_A == day)]-1)){
kk <- kk + 1
f_name <- paste0("~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 2 - Pf Infection/Experiment 2_replicate 1/E1Test2_",day,"_", formatC(k, width = 5,flag = 0),".txt")
dx_A[kk,] <- read.table(file = f_name, header=T, sep="\t")[,2]
}
}
# replicates 2 and 3
dates_B        <- c("26Jan18","28Jan18","30Jan18","01Fev18","03Fev18","05Fev18","07Fev18","09Fev18","11Fev18","13Fev18","19Mars18","21Mars18","23Mars18","25Mars18","27Mars18","29Mars18","31Mars18","02Avr18","04Avr18")
nx_dates_start <- c(    0   ,    481   ,   963   ,  1445   ,  1925   ,  2407   ,  2889   ,  3371   ,  3853   ,  4223   ,   4429   ,   4671   ,   4913   ,   5155   ,   5357   ,   5519   ,   5649   ,   5731  ,   5813  )
nx_dates_end   <- c(   480  ,    962   ,   1444  ,  1924   ,  2406   ,  2888   ,  3370   ,  3852   ,  4222   ,  4428   ,   4670   ,   4912   ,   5154   ,   5356   ,   5518   ,   5648   ,   5730   ,   5812  ,   5858  )
nx_dates_B <- nx_dates_end - nx_dates_start + 1
nx_B <- sum(nx_dates_B)  # number of spectra files
dx_B <- c()
for(day in dates_B){
dx_B_aux <- matrix(0, nx_dates_B[which(day==dates_B)], 2151);  kk <- 1
for(k in nx_dates_start[which(day==dates_B)]:nx_dates_end[which(day==dates_B)]){
f_name <- paste0("~/Dropbox/research/projects/nirs/data/datasets/Burkina NIRS Data/Activity 2 - Pf Infection/Experiment 2_replicate 2 3/E2PfInfection_",day,"_", formatC(k, width = 5,flag = 0),".txt")
dx_B_aux[kk,] <- read.table(file = f_name, header=T, sep="\t")[,2]
kk <- kk + 1
}
dx_B <- rbind(dx_B, dx_B_aux)
}
# merge
dx <- rbind(dx_A, dx_B)
# average replications
if(Params$avg_replics){
data_X <- c()
for(i in unique_IDs){
if(length(idx[[i]]) > 1){
data_X <- rbind(data_X, colMeans(dx[idx[[i]],]))
}else{
data_X <- rbind(data_X, dx[idx[[i]],])
}
}
}else{
data_X <- dx[select,]
}
# read response (y)
i_y <- select & ((1:nrow(data)) %in% unlist(sapply(idx, "[[", 1)))
data_y <- data[i_y,"Infection_status"]
# raw data
raw_data <- data[i_y,]
return(list(X = data_X, y = data_y, n_replics = n_replics[n_replics != 0], raw_data = raw_data))
# re-save with simple layout
#data_export <- data.frame(y = y, X = X)
#write.table(data_export, file="~/Dropbox/research/projects/nirs/data/datasets/experiments_Tom/A1_sporozoites/DATASET_sporozoites_2017_06_01.txt", sep=",", row.names=F, col.names=T)
}#load_B_A2E2
#================================   B_A1E1  BURKINA FASO, ACTIVITY 1 EXPERIMENT 1 (AGE)
data_B_A1E1 <- load_B_A1E1(Params);   X <- data_B_A1E1$X;   y <- data_B_A1E1$y;   raw_data <- data_B_A1E1$raw_data
str(raw_data)
table(raw_data[,"Age"])
ii <- which((raw_data[,"Species"] == "arabiensis") & (raw_data[,"Infection_status"] %in% c(""))
ii <- which(raw_data[,"Species"] == "arabiensis")
X2 <- X[ii,]
y2 <- y[ii];  N <- length(y2)
dim(X2)
length(y2)
set.seed(17571); obj1 <- fdaML_train(ll = list(X=X2, y=y2, Z=NULL, task='clas', model='glm', reduction='pls', cv='n', intercept=T, reps=30, Qlen=30, Qopt=NULL, Qvec=NULL, split_size=0.5, tau_Q_opt=0.01, balanced=F, estimation_w=NULL, bspline_dim=floor(vec_basis[nb] * ncol(X)), t_range=wvlenghts, verbose=T) )
set.seed(17571); obj1 <- fdaML_train(ll = list(X=X2, y=y2, Z=NULL, task='clas', model='glm', reduction='pls', cv='n', intercept=T, reps=30, Qlen=30, Qopt=NULL, Qvec=NULL, split_size=0.5, lam_cv_type="n", tau_Q_opt=0.01, balanced=F, estimation_w=NULL, bspline_dim=floor(vec_basis[nb] * ncol(X)), t_range=wvlenghts, verbose=T) )
set.seed(17571); obj1 <- fdaML_train(ll = list(X=X2, y=y2, Z=NULL, task='regr', model='lm', reduction='pls', cv='n', intercept=T, reps=30, Qlen=30, Qopt=NULL, Qvec=NULL, split_size=0.5, lam_cv_type="n", tau_Q_opt=0.01, balanced=F, estimation_w=NULL, bspline_dim=floor(vec_basis[nb] * ncol(X)), t_range=wvlenghts, verbose=T) )
fdaPlot(obj1, hist_range=c(-25,15))
# predict
ii <- which(raw_data[,"Species"] == "gambiae")
X_pred <- X[ii,]
y_pred <- y[ii]
set.seed(17571); obj1 <- fdaML_train(ll = list(X=X_pred, y=y_pred, Z=NULL, task='regr', model='lm', reduction='pls', cv='n', intercept=T, reps=30, Qlen=30, Qopt=NULL, Qvec=NULL, split_size=0.5, lam_cv_type="n", tau_Q_opt=0.01, balanced=F, estimation_w=NULL, bspline_dim=floor(0.2 * ncol(X)), t_range=wvlenghts, verbose=T) )
obj2 <- fdaML_predict(obj = obj1, new_x = X_pred, new_y = y_pred)
?fdaML_predict
obj2 <- fdaML_predict(obj = obj1, new_x = X_pred, new_z = NULL, new_y = y_pred)
obj1$model
#' @title Predict from machine learning model
#'
#' @description Predict using machine learning model.
#'
#' @param obj An object of class \code{fdaModel} generated by \code{\link{fdaML_train}}.
#'
#' @param new_x A new functional predictor matrix.
#'
#' @param new_z A new non-functional predictor matrix.
#'
#' @param new_y A new response vector. If this is provided, the quality of predictions
#' is assessed.
#'
#' @param verbose Whether to print a progress bar (\code{TRUE}) or not (\code{FALSE}).
#'
#' @details
#'
#' @return An object of class \code{fdaModelPred}, which is a list containing the
#' predictions given by model in \code{obj}.
#'
#' @seealso
#' \code{\link{fdaML_train}}
#'
#' @examples
#'
#' @export
#'
fdaML_predict <- function(obj, new_x, new_z = NULL, new_y, verbose = TRUE){
if( class(obj) != "fdaModel" ){
stop("Input 'obj' should be of class 'fdaModel'.")
}
uniq <- sort(unique(new_y));  lu <- length(uniq)
# transform new data
new_y_out <- new_y
cenY <- mean(new_y)
new_y <- scale(new_y, cen=cenY, scale=F)
new_XB <- new_x %*% t(t(obj$B) / colSums(obj$B))  # scaling of 'new_x' is done below as it is randomisation-dependent
# initialisations
newN <- length(new_y)
new_XBV <- ROC_to_plot_binom <- list()
new_y_pred <- resid_test <- matrix(NA, newN, obj$reps)
err_test <- rep(NA, obj$reps)
bias_test <- matrix(0, nrow=obj$reps, ncol=length(uniq)); colnames(bias_test) <- paste0("age",uniq)
alpha <- rep(NA, obj$reps)
beta <- matrix(NA, ncol(new_XB), obj$reps)
gamma <- if(is.null(new_z)){ NULL }else{ matrix(NA, obj$S, obj$reps) }
linear_predictor <- matrix(NA, newN, obj$reps)
AUC_opt <- matrix(NA, obj$reps, 3);   colnames(AUC_opt) <- c("train","valid","test")
avgTestErr_avgTrainCut <- confu <- dc <- NA
classProbs <- classPreds <- list()
avgErr <- rep(NA, obj$reps)
err_stdev_out <- NULL
# coefficients' positions
coef_pos <- matrix(NA,3,2); rownames(coef_pos) <- c('alpha', 'gamma', 'beta'); colnames(coef_pos) <- c('from', 'to')
if(obj$intercept==T & obj$S != 0){
coef_pos['alpha',] <- c(1,1)
coef_pos['gamma',] <- c(2,obj$S+1)
coef_pos['beta', ] <- c(obj$S+2,1+obj$S+obj$Q_opt)
}else if(obj$intercept==T & obj$S == 0){
coef_pos['alpha',] <- c(1,1)
coef_pos['gamma',] <- c(NA,NA)
coef_pos['beta', ] <- c(2,1+obj$Q_opt)
}else if(obj$intercept==F & obj$S != 0){
coef_pos['alpha',] <- c(NA,NA)
coef_pos['gamma',] <- c(1,obj$S)
coef_pos['beta', ] <- c(obj$S+1,obj$S+obj$Q_opt)
}else if(obj$intercept==F & obj$S == 0){
coef_pos['alpha',] <- c(NA,NA)
coef_pos['gamma',] <- c(NA,NA)
coef_pos['beta', ] <- c(1,obj$Q_opt)
}
if(verbose){
cat("","PREDICTING:", sep="\n")
pb = txtProgressBar(min = 0, max = obj$reps, initial = 0, style = 3)
}
for(rr in 1:obj$reps){
new_XBV[[rr]] <- scale(new_XB,  cen=T, scale=F)  %*% obj$D_opt[[rr]]
if(!is.null(new_z)){
new_XBV[[rr]] <- cbind(new_z, new_XBV[[rr]])
}
if(obj$task == "regr"){
new_y_pred[,rr]  <- fdaPrediction(m = obj$m_opt[[rr]], newX = new_XBV[[rr]],  optionsPred = list(intercept = obj$intercept, lam_cv_type=obj$lam_cv_type, task=obj$task, model=obj$model, fam=obj$family))
resid_test[,rr] <- new_y - new_y_pred[,rr]
err_test[rr] <- GET_rmsd(new_y, new_y_pred[,rr])
for(uu in 1:length(uniq)){# bias
id <- (new_y+cenY) == uniq[uu]
bias_test[rr,uu] <- mean(new_y_pred[id,rr]+cenY - uniq[uu])
}
err_out <- round(mean(err_test), 2)
}else if(obj$task == "clas"){
if(obj$family == "binomial"){
new_y_pred[,rr]  <- fdaPrediction(m = obj$m_opt[[rr]], newX = new_XBV[[rr]],  optionsPred = list(intercept=obj$intercept, lam_cv_type=obj$lam_cv_type, task=obj$task, model=obj$model, fam=obj$family))
AUC_opt[rr,] <- c(NA, NA, GET_auc(y_pred = new_y_pred[,rr],  y_true = new_y,  f = obj$family))
ROC_to_plot_binom$pred_test[[rr]] <- new_y_pred[,rr]
ROC_to_plot_binom$labels[[rr]]    <- new_y
}else if(obj$family == "multinomial"){
# get class probabilities by repetition (see also 'classProbs_byTrueLabel' below)
classProbs[[rr]] <- drop(fdaPrediction(m = obj$m_opt[[rr]], newX = new_XBV[[rr]], optionsPred = list(lam_cv_type=obj$lam_cv_type, intercept=obj$intercept, fam=obj$family, predType="probs")))
# get class predictions
classPreds[[rr]] <- drop(fdaPrediction(m = obj$m_opt[[rr]], newX = new_XBV[[rr]], optionsPred = list(lam_cv_type=obj$lam_cv_type, intercept=obj$intercept, fam=obj$family, predType="class")))
new_y_pred[,rr] <- as.numeric(classPreds[[rr]]) - 1
if(all(new_y_pred[,rr] != 0)){ stop("# MAKE SURE LABELS START AT 0!") }
# get accuracy rate
avgErr[rr] <- mean(new_y_out != new_y_pred[,rr])
}#family
}#task
if(verbose)
setTxtProgressBar(pb,rr)
}#rr
if(verbose){
cat("","", sep="\n")
}
# get class probabilities by true label for mGLM
classProbs_byTrueLabel <- list()
if(obj$family == "multinomial"){
for(q in 1:lu){
classProbs_byTrueLabel[[paste0("lvl",uniq[q])]] <- 0
idx <- new_y_out == uniq[q]
for(r in 1:obj$reps){
classProbs_byTrueLabel[[paste0("lvl",uniq[q])]] <- rbind(classProbs_byTrueLabel[[paste0("lvl",uniq[q])]], classProbs[[r]][idx,])
}
classProbs_byTrueLabel[[paste0("lvl",uniq[q])]] <- classProbs_byTrueLabel[[paste0("lvl",uniq[q])]][-1,]
}
}
# compute error for GLMs
if(obj$model == "glm" & obj$family == "binomial"){
# get average cutoff from training data
pred <- prediction(obj$ROC_to_plot_binom$pred_test, obj$ROC_to_plot_binom$labels)
perf <- performance(pred, "tpr", "fpr")
err_perf <- performance(pred, measure = "err")
err_ind = sapply(1:obj$reps, function(z){ which.min(err_perf@y.values[[z]]) })
if(any(err_ind == 1)){   # get rid of infinities in 'err_perf@x.values)'
tt <- (1:obj$reps)[err_ind == 1]; for(l in 1:length(tt)){ if( is.infinite(slot(err_perf, "x.values")[[tt[l]]][1]) ){ err_ind[tt[l]] <- 2 }}
}
err_val = sapply(1:obj$reps, function(z){ err_perf@y.values[[z]][err_ind[z]] })
err_cut = sapply(1:obj$reps, function(z){ err_perf@x.values[[z]][err_ind[z]] })
avg_err <- mean(err_val)
avg_err_cut <- mean(err_cut)
avg_err_avgcut <- mean(as.numeric(c(obj$y_testpred_opt) > avg_err_cut) != obj$y[unlist(obj$id_test)])
# get error rate for testing data using average cutoff from training data
error_by_rep <- sapply(1:obj$reps, function(zz){ mean((new_y_pred[,zz] > avg_err_cut) != (new_y + attr(new_y, 'scaled:center'))) })
avgTestErr_avgTrainCut <- mean(error_by_rep)
stdevTestErr_avgTrainCut <- sd(error_by_rep)
#avgTestErr_avgTrainCut <- mean(as.numeric(c(new_y_pred) > avg_err_cut) != rep(new_y, obj$reps) + attr(new_y, 'scaled:center'))
# confusion matrix
confu <- confusionMatrix(data=factor(as.numeric(c(new_y_pred) > avg_err_cut)), reference = factor(rep(new_y, obj$reps) + attr(new_y, 'scaled:center')))$table
dc <- list(tnr = confu[1,1] / sum(confu[,1]),
tpr = confu[2,2] / sum(confu[,2]),
fnr = confu[1,2] / sum(confu[,2]),
fpr = confu[2,1] / sum(confu[,1]))
err_out <- avgTestErr_avgTrainCut
err_stdev_out <- stdevTestErr_avgTrainCut
}else if(obj$model == "glm" & obj$family == "multinomial"){
err_out <- mean(avgErr)
if(length(uniq) > 1){
dc <- confusionMatrix(data=c(new_y_pred), reference=rep(new_y_out, obj$reps))$table
#dc <- confu / matrix(rep(colSums(confu), lu), lu, lu, byrow=T)
}
}
ret <- structure( list(new_x = new_x,
new_y = new_y_out,
new_z = new_z,
new_XBV = new_XBV,
new_y_pred = new_y_pred,
task = obj$task,
model = obj$model,
family = obj$family,
reps = obj$reps,
uniq = uniq,
lu = lu,
cenY = cenY,
err_test = err_test,
bias_test = bias_test,
ROC_to_plot_binom = ROC_to_plot_binom,
AUC_opt = AUC_opt,
avgTestErr = err_out,
stdevTestErr = err_stdev_out,
confu = confu,
errorBreakdown = dc,
classProbs_byRep = classProbs,
classProbs_byTrueLabel = classProbs_byTrueLabel,
classPreds = classPreds
), class="fdaModelPred")
return(ret)
}
fdaPlot(obj1, hist_range=c(-25,15))
obj2 <- fdaML_predict(obj = obj1, new_x = X_pred, new_z = NULL, new_y = y_pred)
fdaPlotPred(obj2)
